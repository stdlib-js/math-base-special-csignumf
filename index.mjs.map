{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Complex64 from '@stdlib/complex-float32-ctor';\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\nimport real from '@stdlib/complex-float32-real';\nimport imag from '@stdlib/complex-float32-imag';\nimport cabsf from '@stdlib/math-base-special-cabsf';\n\n\n// MAIN //\n\n/**\n* Evaluates the signum function of a single-precision floating-point complex number.\n*\n* @param {Complex64} z - complex number\n* @returns {Complex64} result\n*\n* @example\n* import Complex64 from '@stdlib/complex-float32-ctor';\n* import real from '@stdlib/complex-float32-real';\n* import imag from '@stdlib/complex-float32-imag';\n*\n* var v = csignumf( new Complex64( -4.2, 5.5 ) );\n* // returns <Complex64>\n*\n* var re = real( v );\n* // returns ~-0.607\n*\n* var im = imag( v );\n* // returns ~0.795\n*\n* v = csignumf( new Complex64( 0.0, 0.0 ) );\n* // returns <Complex64>\n*\n* re = real( v );\n* // returns 0.0\n*\n* im = imag( v );\n* // returns 0.0\n*\n* v = csignumf( new Complex64( NaN, NaN ) );\n* // returns <Complex64>\n*\n* re = real( v );\n* // returns NaN\n*\n* im = imag( v );\n* // returns NaN\n*/\nfunction csignumf( z ) {\n\tvar re;\n\tvar im;\n\tvar az;\n\n\taz = cabsf( z );\n\tif ( az === 0.0 ) {\n\t\treturn z;\n\t}\n\tre = float64ToFloat32( real( z ) / az );\n\tim = float64ToFloat32( imag( z ) / az );\n\treturn new Complex64( re, im );\n}\n\n\n// EXPORTS //\n\nexport default csignumf;\n"],"names":["csignumf","z","re","im","az","cabsf","float64ToFloat32","real","imag","Complex64"],"mappings":";;weAqEA,SAASA,EAAUC,GAClB,IAAIC,EACAC,EACAC,EAGJ,OAAY,KADZA,EAAKC,EAAOJ,IAEJA,GAERC,EAAKI,EAAkBC,EAAMN,GAAMG,GACnCD,EAAKG,EAAkBE,EAAMP,GAAMG,GAC5B,IAAIK,EAAWP,EAAIC,GAC3B"}